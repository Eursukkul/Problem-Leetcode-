Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

//Method - 1: We can use two for loops and check is nums[i] = nums[j] and i < j and simply increase count by one every time. I think it will give error of time limit exceeded.

//Method - 2 : First we can count the frequency of each numbers using array. If a number appears n times, then n * (n â€“ 1) / 2 pairs can be made with this number.

class Solution {
    public int numIdenticalPairs(int[] nums) {
        
        int ans = 0;
        int[] count = new int[101];
        
        for(int n: nums)
            count[n]++;
        
        for(int n: count)
            ans += (n * (n - 1))/2;
        
        return ans;
    }
}
